package main

import (
	"reflect"
	"testing"
)

func Test_computeHOTP(t *testing.T) {
	// https://tools.ietf.org/html/rfc4226
	key := []byte{
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
		0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
		0x37, 0x38, 0x39, 0x30,
	}
	counter := uint64(9)
	expect := uint32(645520489)

	actual := computeHOTP(counter, key)
	if actual != expect {
		t.Errorf("unexpected HOTP value %v, want %v", actual, expect)
	}

}

func Test_hmacSHA1(t *testing.T) {
	// https://tools.ietf.org/html/rfc2202
	key := []byte{
		0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
		0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
		0x0b, 0x0b, 0x0b, 0x0b,
	}
	msg := []byte("Hi There")
	expect := []byte{
		0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64,
		0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e,
		0xf1, 0x46, 0xbe, 0x00,
	}

	actual := hmacSHA1(msg, key)
	if !reflect.DeepEqual(actual, expect) {
		t.Errorf("unexpected HMAC")
		t.Errorf("  actual:  % 02x", actual)
		t.Errorf("  want:    % 02x", expect)
	}
}
